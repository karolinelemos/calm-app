Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactNative = require('react-native');

var Segment = _reactNative.NativeModules.ExponentSegment.Segment;
exports.default = {
  initialize: function initialize(options) {
    if (_reactNative.Platform.OS === 'android') {
      return Segment.initializeAndroid(options.androidWriteKey);
    } else if (_reactNative.Platform.OS === 'ios') {
      return Segment.initializeIOS(options.androidWriteKey);
    } else {
      throw new Error('Unable to initialize Segment on `' + _reactNative.Platform.OS + '`');
    }
  },
  initializeIOS: function initializeIOS(writeKey) {
    console.warn('`Segment.initializeIOS(writeKey)` is deprecated, use `Segment.initialize({androidWriteKey, iosWriteKey})` instead.');
    if (_reactNative.Platform.OS !== 'ios') {
      throw new Error('Expo.Segment.initializeIOS() should only be called on iOS, not `' + _reactNative.Platform.OS + '`');
    }

    return Segment.initializeIOS(writeKey);
  },
  initializeAndroid: function initializeAndroid(writeKey) {
    console.warn('`Segment.initializeAndroid(writeKey)` is deprecated, use `Segment.initialize({androidWriteKey, iosWriteKey})` instead.');
    if (_reactNative.Platform.OS !== 'android') {
      throw new Error('Expo.Segment.initializeAndroid() should only be called on Android, not `' + _reactNative.Platform.OS + '`');
    }

    return Segment.initializeAndroid(writeKey);
  },
  identify: function identify(userId) {
    return Segment.identify(userId);
  },
  identifyWithTraits: function identifyWithTraits(userId, traits) {
    return Segment.identifyWithTraits(userId, traits);
  },
  reset: function reset() {
    return Segment.reset();
  },
  track: function track(event) {
    return Segment.track(event);
  },
  trackWithProperties: function trackWithProperties(event, properties) {
    return Segment.trackWithProperties(event, properties);
  },
  screen: function screen(screenName) {
    return Segment.screen(screenName);
  },
  screenWithProperties: function screenWithProperties(event, properties) {
    return Segment.screenWithProperties(event, properties);
  },
  flush: function flush() {
    return Segment.flush();
  }
};